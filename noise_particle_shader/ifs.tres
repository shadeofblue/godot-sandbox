[gd_resource type="Shader" format=2]

[resource]
code = "shader_type particles;

uniform vec2 pos = vec2(0.0, 75.0);

float rnd_fl(float f) {
	return fract(sin(f*0.5453123)*sin(f/0.23123)/sin(f*0.83123));
}

float rnd(int index, float time, float qa, float qb) {
	return rnd_fl(float(index) * fract(sin(time + qa) + qb));
}

uniform vec3 v11 = vec3(0.5, 0.0, -0.9);
uniform vec3 v12 = vec3(0.0, 0.5, 0.0);
uniform vec3 v21 = vec3(0.5, 0.0, 0.9);
uniform vec3 v22 = vec3(0.0, 0.5, 0.0);
uniform vec3 v31 = vec3(0.5, 0.0, 0.0);
uniform vec3 v32 = vec3(0.0, 0.5, 0.9);

mat3 m1() { return mat3(
	v11,
	v12,
	vec3(0.0, 0.0, 1.0)
);
}

mat3 m2() { return mat3(
	v21,
	v22,
	vec3(0.0, 0.0, 1.0)
);
}

mat3 m3() { return mat3(
	v31,
	v32,
	vec3(0.0, 0.0, 1.0)
);
}

mat3 choose_mat(int i) {
	if (i == 0) {
		return m1();
	} else if (i == 1) {
		return m2();
	} else {
		return m3();
	}
}

void vertex() {
	vec3 v = vec3(0.0, 0.0, 1.0);
		
	for (int i = 0; i < (INDEX % 100) + 16; i++) {
		mat3 mat = choose_mat(int(rnd(i, TIME + float(INDEX), 3.123, 0.3) * 3.0));
		v = v * mat;
	}
	
	TRANSFORM[3][0] = pos.x + v.x * 100.0;
	TRANSFORM[3][1] = pos.y - v.y * 100.0;
	COLOR = vec4(1.0, 1.0, 1.0, 1.0);
}

"
